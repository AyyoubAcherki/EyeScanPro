import streamlit as st
from PIL import Image
import numpy as np
from tensorflow.keras.models import load_model


st.title('EyeScan Pro : Votre Diagnostic Visuel en Un Clic')
# 1. Charger le mod√®le
try:
    modele = load_model("milleur_model_vgg16_adam.h5")
    st.sidebar.success("‚úÖ Mod√®le charg√© avec succ√®s")
except Exception as e:
    st.sidebar.error(f"‚ùå Erreur de chargement du mod√®le : {e}")
    st.stop()

# 2. Classes pr√©dictibles
classes = ['Diabetic Retinopathy', 'Glaucoma', 'Healthy', 'Macular Scar', 'Myopia']

# 3. Pr√©paration de l'image
def preparer_image(img):
    try:
        img = img.resize((224, 224)).convert("RGB")  # Redimensionner √† 224x224
        img_array = np.array(img) / 255.0  # Normalisation
        img_array = np.expand_dims(img_array, axis=0)  # Forme (1, 224, 224, 3)
        
        # Affichage des dimensions avant et apr√®s le pr√©traitement
        st.write(f"Image avant pr√©paration : {img.size}")
        st.write(f"Forme de l'image apr√®s pr√©paration : {img_array.shape}")
        
        return img_array
    except Exception as e:
        st.error(f"Erreur de pr√©traitement : {e}")
        return None

# 4. Fonction pour la pr√©diction d'image
def page_predire_image():
    # V√©rification si les informations d'inscription sont remplies
    if "nom" not in st.session_state or "prenom" not in st.session_state:
        st.warning("‚ö†Ô∏è Vous devez d'abord remplir le formulaire d'inscription.")
        return

    st.title("üñºÔ∏è Pr√©diction des maladies des yeux")

    st.subheader("üì∑ Charger une image d'≈ìil")

    fichier_image = st.file_uploader("Choisir une image", type=["jpg", "jpeg", "png"])

    if fichier_image is not None:
        try:
            image = Image.open(fichier_image).convert("RGB")
            st.image(image, caption="Image charg√©e", use_column_width=True)

            img_prep = preparer_image(image)
            if img_prep is None:
                return

            # Pr√©diction
            try:
                prediction = modele.predict(img_prep)
                st.write(f"üß™ Valeurs de la pr√©diction : {prediction}")
                st.write(f"Forme de la pr√©diction : {prediction.shape}")
                
                # V√©rifier que la sortie du mod√®le correspond aux classes
                if prediction.shape[1] != len(classes):
                    st.error(f"‚ùå La sortie du mod√®le ({prediction.shape[1]}) ne correspond pas au nombre de classes ({len(classes)}).")
                else:
                    classe_predite = int(np.argmax(prediction))
                    proba = float(np.max(prediction)) * 100
                    st.markdown(
                        f"<h3 style='color:green;'>‚úÖ R√©sultat : {classes[classe_predite]} ({proba:.2f}%)</h3>",
                        unsafe_allow_html=True
                    )
            except Exception as e:
                st.error(f"‚ùå Erreur lors de la pr√©diction : {e}")
        except Exception as e:
            st.error(f"‚ùå Erreur lors du chargement de l'image : {e}")

# 5. Fonction pour l'inscription
def page_inscription():
    st.title("üßæ Formulaire d'inscription")

    with st.form("formulaire"):
        nom = st.text_input("Nom")
        prenom = st.text_input("Pr√©nom")
        adresse = st.text_input("Adresse")
        email = st.text_input("Email")
        genre = st.radio("Genre", ["Homme", "Femme"])
        soumis = st.form_submit_button("Valider")

    if soumis:
        if not all([nom, prenom, adresse, email]):
            st.warning("‚ö†Ô∏è Veuillez remplir tous les champs.")
            return
        st.success(f"Bienvenue {prenom} {nom} üëã")
        
        # Sauvegarder les informations de l'utilisateur dans la session
        st.session_state.nom = nom
        st.session_state.prenom = prenom
        st.session_state.adresse = adresse
        st.session_state.email = email
        st.session_state.genre = genre

        st.info("‚úÖ Formulaire d'inscription soumis avec succ√®s. Vous pouvez maintenant acc√©der √† la page de pr√©diction.")

# 6. Menu de navigation pour les pages
PAGES = {
    "Page d'Inscription": page_inscription,
    "Pr√©diction d'Image": page_predire_image
}

def main():
    st.sidebar.title("Navigation")
    page = st.sidebar.radio("S√©lectionner une page", list(PAGES.keys()))
    PAGES[page]()

if __name__ == "__main__":
    main()
